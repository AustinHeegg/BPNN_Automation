import numpy as np


class BPNeuralNetwork:
    def __init__(self, weights, biases):
        self.weights = weights  # 权重矩阵
        self.biases = biases  # 偏置向量

    def activation_function(self, x):
        """使用 sigmoid 激活函数进行激活."""
        return 1 / (1 + np.exp(-x))

    def forward_propagation(self, inputs):
        # 输入层到输入层
        input_layer = inputs
        print("Input Layer is:", input_layer)
        # 第一层（输入层到第一个隐藏层）
        hidden_layer_1 = self.activation_function(np.dot(self.weights[0], inputs.T) + self.biases[0].reshape(-1, 1))
        print("Hidden Layer 1 is:", hidden_layer_1)
        # 第二层（第一个隐藏层到第二个隐藏层）
        hidden_layer_2 = self.activation_function(
            np.dot(self.weights[1], hidden_layer_1) + self.biases[1].reshape(-1, 1))
        print("Hidden Layer 2 is:", hidden_layer_2)
        # 第三层（第二个隐藏层到第三个隐藏层）
        hidden_layer_3 = self.activation_function(
            np.dot(self.weights[2], hidden_layer_2) + self.biases[2].reshape(-1, 1))
        print("Hidden Layer 3 is:", hidden_layer_3)
        # 输出层（第三个隐藏层到输出层）
        output_layer = np.dot(self.weights[3], hidden_layer_3) + self.biases[3].reshape(-1, 1)
        print("Output Layer is:", output_layer)
        output_layer_with_act = output_layer
        print("Output Layer is:", output_layer_with_act)
        # 输出层到输出层
        return output_layer_with_act


if __name__ == "__main__":
    # 替换数据生成的weights
    weights = [
        np.array([
            [
                -0.03617724031209946,
                -0.40013715624809265
            ],
            [
                -0.21110044419765472,
                -0.34440505504608154
            ],
            [
                -0.45731720328330994,
                -0.03462625667452812
            ],
            [
                -0.3836657702922821,
                0.16371610760688782
            ],
            [
                -0.15938016772270203,
                -0.36394932866096497
            ],
            [
                -0.30018675327301025,
                0.24357521533966064
            ],
            [
                -0.2249906063079834,
                0.330908864736557
            ],
            [
                0.367451548576355,
                0.17031122744083405
            ]
                ]),
        np.array([
            [
                -0.7098129391670227,
                -0.5919472575187683,
                -0.8279528021812439,
                -0.5316534638404846,
                -0.3293544054031372,
                -0.049727484583854675,
                -0.305524080991745,
                1.0788753032684326
            ],
            [
                -1.17650306224823,
                -1.2546929121017456,
                -0.3509359061717987,
                0.23436881601810455,
                -0.9097389578819275,
                0.6759153008460999,
                0.544143557548523,
                0.9163617491722107
            ],
            [
                1.1322044134140015,
                1.1877528429031372,
                0.3246402442455292,
                -0.7022500038146973,
                0.5119684338569641,
                -0.1431879699230194,
                -0.8232411742210388,
                -0.7780426144599915
            ],
            [
                -0.7995643615722656,
                -0.10719754546880722,
                0.47412243485450745,
                0.9246131181716919,
                -0.3244694471359253,
                1.0036131143569946,
                0.8404334783554077,
                -0.43739771842956543
            ],
            [
                0.16434529423713684,
                0.5807127952575684,
                0.631852924823761,
                0.8846070170402527,
                -0.04425828531384468,
                0.4957506060600281,
                0.3252623975276947,
                -0.9052330851554871
            ],
            [
                -0.4458647668361664,
                -0.6733613014221191,
                -0.7691353559494019,
                -0.3214114010334015,
                -0.719278872013092,
                0.26516014337539673,
                0.4417183995246887,
                0.973134458065033
            ],
            [
                -0.13929103314876556,
                -0.1187756136059761,
                0.4671814441680908,
                1.2134575843811035,
                0.2508755028247833,
                0.8673453330993652,
                0.5547741055488586,
                -0.8565062284469604
            ],
            [
                1.0326812267303467,
                0.39066988229751587,
                -0.4458274245262146,
                -1.337480068206787,
                -0.015148073434829712,
                -0.9465345740318298,
                -0.6912187337875366,
                0.6207072138786316
            ]
        ]),
        np.array([
            [
                0.24197624623775482,
                -0.477844774723053,
                0.26130712032318115,
                -0.7936177849769592,
                -0.2836815416812897,
                -0.03766578063368797,
                -0.605922281742096,
                0.6614827513694763
            ],
            [
                1.2337092161178589,
                1.4282886981964111,
                -1.1001989841461182,
                -0.651577889919281,
                -0.9394750595092773,
                1.039128303527832,
                -0.6698409914970398,
                0.7354952692985535
            ],
            [
                0.6430492997169495,
                -0.11161498725414276,
                0.22309695184230804,
                -1.0325833559036255,
                -0.3910845220088959,
                -0.049200255423784256,
                -1.0080755949020386,
                1.4153474569320679
            ],
            [
                1.0303634405136108,
                0.6030789017677307,
                -0.6549648642539978,
                -0.3341462314128876,
                -0.7813117504119873,
                0.9270091652870178,
                -0.8569896817207336,
                0.7013792395591736
            ],
            [
                -0.2673824727535248,
                -1.6679004430770874,
                1.66646409034729,
                -1.4031803607940674,
                -0.4475165605545044,
                -0.6443690061569214,
                -1.0040677785873413,
                2.155494451522827
            ],
            [
                0.5940534472465515,
                2.488875389099121,
                -2.093406915664673,
                0.5513174533843994,
                -0.5017600655555725,
                0.7401614785194397,
                -0.3377804756164551,
                -0.7972230315208435
            ],
            [
                -1.29872465133667,
                -1.0891063213348389,
                0.3884466886520386,
                1.2844030857086182,
                1.5733349323272705,
                -1.2886242866516113,
                1.5747475624084473,
                -1.6668227910995483
            ],
            [
                0.25458472967147827,
                -0.3457469642162323,
                0.40005555748939514,
                -0.7342023253440857,
                -0.30490878224372864,
                -0.13426761329174042,
                -0.766645610332489,
                0.9682969450950623
            ]
        ]),
        np.array([
            [
                0.6856215000152588,
                2.600572347640991,
                1.642788052558899,
                1.9268203973770142,
                1.6787035465240479,
                1.1676536798477173,
                -5.4129638671875,
                0.7705628275871277
            ],
            [
                -1.0631945133209229,
                1.647710919380188,
                -1.234310507774353,
                0.6463496685028076,
                -4.970236778259277,
                4.394607067108154,
                -0.17554570734500885,
                -1.1148422956466675
            ]
        ])
    ]

    # 替换数据生成的biases
    biases = [
        np.array([
                    0.5625599026679993,
                    -0.5296184420585632,
                    -0.3075973093509674,
                    -0.14401639997959137,
                    0.10803267359733582,
                    -0.008832869119942188,
                    0.33597850799560547,
                    0.1507631093263626
                ]),
        np.array([
                    0.7269330620765686,
                    0.6692928075790405,
                    -0.11663763225078583,
                    -0.46436816453933716,
                    -0.6090877652168274,
                    0.12156924605369568,
                    -0.7244082689285278,
                    0.7732502818107605
                ]),
        np.array([
                    -0.07449018955230713,
                    -0.25834792852401733,
                    -0.109461709856987,
                    -0.2871963381767273,
                    0.6811187863349915,
                    0.015422606840729713,
                    -0.04920923337340355,
                    0.11458776891231537
                ]),
        np.array([
                    -1.4231886863708496,
                    -0.06544739753007889
                ])
    ]

    # 替换输入数据
    input_data = np.array([
        [-2.601249, 2.772042],
        # [-0.25, -0.25],
        # [-1.69704227868104, 1.69704227868104],
        # [-1.41403286899896, 1.41403286899896],
        # [-1.13096978552511, 1.13096978552511],
        # [0.799761854932068, - 0.39932882084621],
        # [0.39932128487282, -0.39932882084621],
        # [0, -0.39932882084621],
        # [-0.39932128487282, -0.39932882084621],
        # [-0.799761854932068, -0.39932882084621],
        # [-1.19903781828619, -0.39932882084621],
        # [-1.59940262546915, -0.39932882084621],
        # [-1.99970672260403, -0.39932882084621],
        # [-2.39993491496712, -0.39932882084621],
        # [-2.79893862081549, -0.39932882084621]
    ])

    # 创建 BP 神经网络实例
    bp_nn = BPNeuralNetwork(weights, biases)

    # 对每个输入进行前向传播并输出结果
    outputs = bp_nn.forward_propagation(input_data)

    print("输出结果:")
    print(outputs.T)
